# LAMMPS input script for simulating chiral ABPs in an anisotropic potential / obstacle.

shell       mkdir out
log         out/loginit.out
variable    seed index 12345

# settings
variable    rho equal 0.50   # density
variable    L equal 100        # Simulation box size
variable    L2 equal $L/2
variable    Nabp equal round(${rho}*$L^2)
variable    massline equal 0.1
variable    mu_x equal 1
variable    Dx equal 0
variable    v0 equal 1
variable    lp equal 10
variable    lr equal 5
# variable    lr equal 10000000000000
variable    chirality equal -1  # +1 for CCW ABPs, -1 for CW
variable    kharm_trans equal 2
variable    kharm_rot equal 5
# -*-*-*-*-*-*--*-*-*--*-*-*-
variable    Dtheta equal ${v0}/${lp}
variable    omega equal ${chirality}*${v0}/${lr}
# variable    omega equal 0
variable    gamma_x equal 1/${mu_x}
variable    sigma equal 2
variable    rcut equal ${sigma}*2^(1.0/6.0)  # for WCA potential
variable    dt equal 0.01

# problem setup
units       lj
dimension   2
atom_style  bond
neigh_modify    delay 0 every 1

# Make ABPs:
lattice         sq ${rho}  # Set the lattice density for ABPs.
region          simbox block -${L2} ${L2} -${L2} ${L2} -0.1 0.1 units box # Box units, rather than lattice
create_box      2 simbox &
                bond/types 1 &
                extra/bond/per/atom 1
molecule        line ../passive_objects/line_10.txt
create_atoms    1 single 0 0 0 mol line 12345 rotate 270 0 0 1 # Insert line obstacle with random rotation
create_atoms    1 random ${Nabp} ${seed} NULL overlap 2 maxtry 100 # Insert passive tracers randomly

group           abp type 1
group           line type 2


# Write out the simulation parameters for post-processing:
variable        ly equal ly
variable        lx equal lx
print           '{'                                 file   params.json
print           '   "massline": ${massline},'       append params.json
print           '   "rho": ${rho},'                 append params.json
print           '   "lx": ${lx},'                   append params.json
print           '   "ly": ${ly},'                   append params.json
print           '   "Dtheta": ${Dtheta},'           append params.json
print           '   "v0":${v0},'                    append params.json
print           '   "lp": ${lp},'                   append params.json
print           '   "lr": ${lr},'                   append params.json
print           '   "gamma_x":${gamma_x},'          append params.json
print           '   "Dx":${Dx},'                    append params.json
print           '   "omega":${omega},'              append params.json
print           '   "rcut": ${rcut},'               append params.json
print           '   "dt": ${dt},'                   append params.json
print           '   "kharm_trans": ${kharm_trans},'    append params.json
print           '   "kharm_rot": ${kharm_rot},'        append params.json
print           '}'                                 append params.json

# Define interactions
pair_style      lj/cut 1
pair_modify     shift yes
pair_coeff      * * 0 0
pair_coeff      1 2 1 ${sigma} ${rcut}
mass            1 1.0
mass            2 ${massline}  # Mass of one bead in the line particle
delete_atoms    overlap 0.5 abp line  # NOW: Delete ABPs overlapping the line object (with random rotation)


# Define fixes that affect dynamics
fix             1 abp property/atom d_thetavec  # Initialize vector of directors (this gets used inside fix abp)
fix             2 abp abp ${Dx} ${Dtheta} ${gamma_x} ${omega} ${v0} ${seed} # DX DTHETA GAMMA_X OMEGA V0 SEED
# fix             2a abp langevin 1 1 ${mu_x} ${seed} # Passive bath
# fix             2b abp nve                          # Passive bath
# fix             rigid line rigid/nve molecule force 1 off off off  ## Pinned
fix             rigid line rigid/nve molecule  ## Free
fix             2d all enforce2d

# Compute local orientation of the rod and add harmonic force and torque
variable        dx equal x[2]-x[1]   # x2-x1  Note, we don't need unwrapped coords
variable        dy equal y[2]-y[1]   # y2-y1  because of translational potential
variable        thetarod equal atan2(v_dy,v_dx)
variable        vx equal vx[2]-vx[1]
variable        vy equal vy[2]-vy[1]
variable        omegarod equal (v_dx*v_vy-v_dy*v_vx)/(v_dx^2+v_dy^2)
variable        torque equal -2*v_kharm_rot*v_thetarod  # Harmonic torque
# variable        torque equal -v_kharm_rot*sin(v_thetarod)  # Sinusoidal torque
variable        fxharm atom -2*v_kharm_trans*x/count(line)  # Don't want force to scale with size
variable        fyharm atom -2*v_kharm_trans*y/count(line)  # Don't want force to scale with size
fix             3 line addforce v_fxharm v_fyharm 0
fix             4 line addtorque 0 0 v_torque



# Equilibration run
velocity        line create 1.0 94609 mom no rot no dist gaussian
variable        theta_init atom random(0,2*PI,${seed})
set             atom * d_thetavec v_theta_init  # Initialize ABPs with random directions
write_dump      all xyz init.xyz
thermo          1000
thermo_style    custom step temp press cpu spcpu density lx
timestep        ${dt}
run             100000
write_dump      all xyz eq.xyz

# Production run:
label           production_run
log             out/log.out
timestep        ${dt}


# Temperature signatures for harmonic potential:
variable        vartheta equal v_thetarod^2
variable        varomega equal v_omegarod^2
variable        X equal f_rigid[1][1]
variable        Vx equal f_rigid[1][4]
variable        varR equal f_rigid[1][1]^2+f_rigid[1][2]^2
variable        varV equal f_rigid[1][4]^2+f_rigid[1][5]^2

fix             Teff_avg line ave/time 10 1000 10000 &
                v_thetarod v_omegarod v_vartheta v_varomega v_varR v_varV &
                ave running overwrite file out/Teff_avg.out

fix             Teff_avg_notrunning line ave/time 10 100000 1000000 &
                v_thetarod v_omegarod v_vartheta v_varomega v_varR v_varV &
                file out/Teff_avg_notrunning.out

# Histogram calculations:
fix             histo line ave/histo 10 1000 10000 -5 5 1000 v_thetarod file out/thetahisto.out ave running overwrite
fix             histo2 line ave/histo 10 1000 10000 -1 1 1000 v_omegarod file out/omegahisto.out ave running overwrite
fix             histo3 line ave/histo 10 1000 10000 -1 1 1000 v_X file out/xhisto.out ave running overwrite
fix             histo4 line ave/histo 10 1000 10000 -1 1 1000 v_Vx file out/vxhisto.out ave running overwrite

# Temperature signatures for sinusoidal potential:
# variable        costheta equal cos(v_thetarod)
# variable        sintheta equal sin(v_thetarod)
# variable        thetasintheta equal v_thetarod*sin(v_thetarod)
# variable        varomega equal v_omegarod^2
# variable        varR equal f_rigid[1][1]^2+f_rigid[1][2]^2
# variable        varV equal f_rigid[1][4]^2+f_rigid[1][5]^2

# fix             Teff_avg line ave/time 10 1000 10000 &
#                 v_thetarod v_omegarod v_costheta v_thetasintheta v_varomega v_varR v_varV &
#                 ave running overwrite file out/Teff_avg.out


# dump            traj all xyz 100 out/traj.xyz
thermo_style    custom step temp press cpu spcpu v_thetarod
thermo          1000
run             1000000000
write_dump      all xyz final.xyz
